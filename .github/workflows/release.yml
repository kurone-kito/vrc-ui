name: Build Release

on:
  workflow_dispatch:

jobs:
  config:
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
    runs-on: ubuntu-latest
    steps:
      - id: config_package
        name: Ensure that required repository variable has been created for the Package
        run: |
          if [ "${{ vars.PACKAGE_NAME }}" != "" ]; then
            echo "configPackage=true" >> $GITHUB_OUTPUT;
          else
            echo "configPackage=false" >> $GITHUB_OUTPUT;
          fi
  build:
    env:
      packagePath: Packages/${{ vars.PACKAGE_NAME }}
      stableVersion:
      unityPackage:
      version:
      zipFile:
    if: needs.config.outputs.config_package == 'true'
    needs: config
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - id: gpg
        name: Import the GPG key
        # cspell: disable-next-line
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          trust_level: 5
      - name: Checkout Local Repository
        uses: actions/checkout@v4
      - name: copy the README and LICENSE files to the Package folder
        run: cp README.md README.*.md LICENSE LICENSE.*.txt "${{ env.packagePath }}"
      - id: version
        name: Get the Package version based on the package.json file
        # cspell: disable-next-line
        uses: sergeysova/jq-action@v2
        with:
          cmd: jq -r ".version" "${{ env.packagePath }}/package.json"
      - id: stable-match
        name: Detect whether the version is a stable release
        # cspell: disable-next-line
        uses: kaisugi/action-regex-match@v1.0.1
        with:
          flags: gm
          regex: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          text: ${{ steps.version.outputs.value }}
      - name: Configure the Environment Variables needed for releasing the Package
        run: |
          echo "stableVersion=${{ steps.stable-match.outputs.match }}" >> $GITHUB_ENV
          echo "unityPackage=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_ENV
          echo "zipFile=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.zip" >> $GITHUB_ENV
      - name: Zip the Package for release
        run: zip -r -9 "${{ github.workspace }}/${{ env.zipFile }}" .
        working-directory: "${{ env.packagePath }}"
      - name: Build a list of .meta files for future use
        run: find "${{ env.packagePath }}/" -name '*.meta' -type f >> metaList
      - name: Make a UnityPackage version of the Package for release
        uses: pCYSl5EDgo/create-unitypackage@v1
        with:
          include-files: metaList
          package-path: ${{ env.unityPackage }}
      - name: Zip the UnityPackage for release
        run: zip -r -9 "${{ env.unityPackage }}.zip" ${{ env.unityPackage }} LICENSE README.md README.ja.md
      - env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        name: Sign the artifacts
        run: |
          echo "${GPG_PASSPHRASE}" | gpg --batch -ab "${{ env.zipFile }}"
          echo "${GPG_PASSPHRASE}" | gpg --batch -ab "${{ env.unityPackage }}"
          echo "${GPG_PASSPHRASE}" | gpg --batch -ab "${{ env.unityPackage }}.zip"
      - id: tag_version
        name: Make a release tag of the version from the package.json file
        # cspell: disable-next-line
        uses: rickstaa/action-create-tag@v1
        with:
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          tag: "${{ env.version }}"
      - name: Publish the Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.zipFile }}
            ${{ env.zipFile }}.asc
            ${{ env.unityPackage }}
            ${{ env.unityPackage }}.asc
            ${{ env.unityPackage }}.zip
            ${{ env.unityPackage }}.zip.asc
            ${{ env.packagePath }}/package.json
          prerelease: ${{ env.stableVersion == '' }}
          tag_name: ${{ env.version }}
